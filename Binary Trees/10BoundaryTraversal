

class Solution {
    public boolean isLeaf(Node node){
        return node.left==null && node.right ==null;
    }
    public void leftBoundary(Node node,List<Integer>res){
        Node curr =node.left;
        while(curr!=null){
            if(!isLeaf(curr)){
                res.add(curr.data);
            }
            if(curr.left!=null){
                curr=curr.left;
            }else{
                curr=curr.right;
            }
        }
    }
    
    public void addLeaf(Node node ,List<Integer> res){
        if(isLeaf(node)){
            res.add(node);
            return;
        }
        if(node.left!=null){
            addLeaf(node.left,res);
        }
         if(node.right!=null){
            addLeaf(node.right,res);
        }
        
        
    }
    public void rightBoundary(Node node ,List<Integer> res){
        Node curr= node.right;
        List<Integer>temp=new ArrayList<>();
       while(curr!=null){
           if(!leafNode(curr)){
               temp.add(curr.data);
           }
           if(curr.right!=null){
               curr=curr.right;
           }
           else{
               curr=curr.left;
           }
       }
       for(int i= temp.size();i>0;i--){
           res.add(temp.get(i));
       }
    }
    
    
    ArrayList<Integer> boundaryTraversal(Node node) {
        List<Integer> res= new ArrayList<>();
        if(root==null) return res;
        if(!isLeaf(node)){
            res.add(node.data);
        }
        leftBoundary(node,res);
        addLeaf(node,res);
        rightBoundary(node,res);
        return res;
       
        
    }
}