class Solution{
    private boolean isValid(int i,int j,int n,int m){
        return i>=0 && i<n && j>=0 && j<m;
    }
    private void bfs(int i,int j,boolean[][] vis,char[][] grid){
        int n=grid.length,m=grid[0].length;
        Queue<int[]> q=new LinkedList<>();
        q.add(new int[]{i,j});
        vis[i][j]=true;
        int[] delRow={-1,0,1,0};
        int[] delCol={0,1,0,-1};

        while(!q.isEmpty()){
            int[] cell=q.poll();
            int row=cell[0],col=cell[1];
            for(int d=0;d<4;d++){
                int newRow=row+delRow[d],newCol=col+delCol[d];
                if(isValid(newRow,newCol,n,m) && grid[newRow][newCol]=='1' && !vis[newRow][newCol]){
                    vis[newRow][newCol]=true;
                    q.add(new int[]{newRow,newCol});
                }
            }
        }
    }

    public int numIslands(char[][] grid){
        int n=grid.length,m=grid[0].length,count=0;
        boolean[][] vis=new boolean[n][m];
        for(int i=0;i<n;i++){
            for(int j=0;j<m;j++){
                if(!vis[i][j] && grid[i][j]=='1'){
                    count++;
                    bfs(i,j,vis,grid);
                }
            }
        }
        return count;
    }
}