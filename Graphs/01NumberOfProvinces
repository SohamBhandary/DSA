class Solution {
    private void bfs(int node,List<Integer>[]adj,boolean vis[]){
        Queue<Integer> q = new LinkedList<>();
        vis[node]=true;
        q.offer(node);
        while(!q.isEmpty()){
            int i =q.poll();
            for(int nb : adj[i]){
                if(!vis[nb]){
                    vis[nb]=true;
                    q.offer(nb);
                }
            }
        }
    }


    public int findCircleNum(int[][] isConnected) {
        int n = isConnected.length;
        boolean v[]=new boolean[n];
        List<Integer>[]adjLs = new ArrayList[n];
        for(int i=0;i<n;i++){
            adjLs[i]=new ArrayList<>();
        }
        for(int i=0;i<n;i++){
            for(int j=0;j<n;j++){
                if(isConnected[i][j]==1 && i!=j){
                    adjLs[i].add(j);
                }

            }
        }
        int cnt=0;
        for(int i =0;i<n;i++){
            if(!v[i]){
                cnt++;
                bfs(i,adjLs,v);

            }
        }
        return cnt;

        
    }
}