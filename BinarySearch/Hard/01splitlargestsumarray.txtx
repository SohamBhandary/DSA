class Solution {
    public int countPartitions(int[] nums, int maxSum) {
        int subArray = 0;
        int partitions = 1;
        for (int num : nums) {
            if (num > maxSum) return Integer.MAX_VALUE; 
            if (subArray + num <= maxSum) {
                subArray += num;
            } else {
                partitions++;
                subArray = num;
            }
        }
        return partitions;
    }

    public int splitArray(int[] nums, int k) {
        int low = 0, high = 0;
        for (int num : nums) {
            low = Math.max(low, num); 
            high += num;              
        }

        while (low < high) {
            int mid = low + (high - low) / 2;
            int partitions = countPartitions(nums, mid);

            if (partitions > k) {
                low = mid + 1; 
            } else {
                high = mid; 
            }
        }

        return low;
    }
}
